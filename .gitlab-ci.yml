stages:
  - build
  - scan
  - analyze
  - report
  - deploy-dashboard

variables:
  OSS_SCANNER_DATABASE_PATH: "./db/oss_scan.db"
  OSS_SCANNER_SCANNER_TIMEOUT_SECONDS: "300"
  OSS_SCANNER_POLICY_GLOBAL_SETTINGS_ENABLE_LICENSE_CHECK: "true"
  OSS_SCANNER_POLICY_GLOBAL_SETTINGS_ENABLE_VULNERABILITY_CHECK: "true"
  SYFT_VERSION: "latest"
  GRYPE_VERSION: "latest"

# Ï∫êÏãú ÏÑ§Ï†ï
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - ~/.cache/go-build/
    - ~/.cache/oss-scanner/
    - vendor/

# Í≥µÌÜµ Ïä§ÌÅ¨Î¶ΩÌä∏
.install_tools: &install_tools
  - echo "üì¶ Installing OSS scanning tools..."
  - curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
  - curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
  - syft version
  - grype version

.setup_scanner: &setup_scanner
  - echo "üîß Setting up OSS Compliance Scanner..."
  - go mod download
  - go build -o oss-compliance-scanner .
  - mkdir -p db artifacts/sboms artifacts/reports artifacts/exports

# ÎπåÎìú Îã®Í≥Ñ
build:
  stage: build
  image: golang:1.22-alpine
  before_script:
    - apk add --no-cache git curl bash sqlite
    - *install_tools
  script:
    - *setup_scanner
  artifacts:
    paths:
      - oss-compliance-scanner
      - db/
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# Ïä§Ï∫î Îã®Í≥Ñ - Î™®ÎÖ∏Î†àÌè¨ Ï†ÑÏ≤¥
scan_full_repository:
  stage: scan
  image: golang:1.22-alpine
  dependencies:
    - build
  before_script:
    - apk add --no-cache git curl bash sqlite jq
  script:
    - echo "üîç Running full repository OSS compliance scan..."
    
    # ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±
    - |
      cat > .oss-compliance-scanner.yaml << 'EOF'
      database:
        driver: sqlite3
        path: ./db/oss_scan.db
      
      scanner:
        syft_path: /usr/local/bin/syft
        grype_path: /usr/local/bin/grype
        timeout_seconds: 300
        temp_dir: /tmp/oss-scanner
      
      policy:
        global_settings:
          enable_license_check: true
          enable_vulnerability_check: true
          scan_timeout: 30
      
      notification:
        slack:
          webhook_url: $SLACK_WEBHOOK_URL
        notify_on_violation: true
        min_severity_level: High
      
      logging:
        level: info
        format: json
      EOF
    
    # Ïª§Ïä§ÌÖÄ Î£∞ Î°úÎìú
    - |
      if [ -f "custom-rules.yaml" ]; then
        echo "Using project-specific custom rules"
        cp custom-rules.yaml ./examples/
      else
        echo "Using default custom rules"
      fi
    
    # Ï†ÑÏ≤¥ Ï†ÄÏû•ÏÜå Ïä§Ï∫î
    - ./oss-compliance-scanner scan --repo . --notify=true --verbose || echo "Scan completed with issues"
    
    # SBOM ÏÉùÏÑ±
    - echo "üìã Generating SBOM artifacts..."
    - syft . -o json > artifacts/sboms/sbom.json
    - syft . -o spdx-json > artifacts/sboms/sbom-spdx.json
    - syft . -o cyclonedx-json > artifacts/sboms/sbom-cyclonedx.json
    
    # Ï∑®ÏïΩÏ†ê Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±  
    - echo "üêõ Generating vulnerability report..."
    - grype . -o json > artifacts/reports/vulnerabilities.json
    - grype . -o table > artifacts/reports/vulnerabilities.txt
    
  artifacts:
    paths:
      - artifacts/
      - db/oss_scan.db
    reports:
      junit: artifacts/reports/junit.xml
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

# Ïä§Ï∫î Îã®Í≥Ñ - Í∞úÎ≥Ñ Î™®Îìà
scan_modules:
  stage: scan
  image: golang:1.22-alpine
  dependencies:
    - build
  before_script:
    - apk add --no-cache git curl bash sqlite jq
  script:
    - echo "üîç Running module-specific OSS compliance scans..."
    
    # ÏûêÎèô Î™®Îìà ÌÉêÏßÄ Î∞è Ïä§Ï∫î
    - |
      MODULES=$(find . -name "package.json" -o -name "go.mod" -o -name "requirements.txt" -o -name "pom.xml" -o -name "Cargo.toml" | sed 's|/[^/]*$||' | sort -u | grep -v '^\.$' || echo "")
      
      if [ -n "$MODULES" ]; then
        echo "Detected modules:"
        echo "$MODULES"
        
        for module in $MODULES; do
          echo "Scanning module: $module"
          ./oss-compliance-scanner scan --module "$module" --notify=false --verbose || echo "Module $module scan completed with issues"
        done
      else
        echo "No modules detected, running root scan"
        ./oss-compliance-scanner scan --repo . --notify=false --verbose || echo "Root scan completed with issues"
      fi
    
  artifacts:
    paths:
      - db/oss_scan.db
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests
  when: manual  # ÏàòÎèô Ïã§Ìñâ

# Î∂ÑÏÑù Îã®Í≥Ñ
analyze_results:
  stage: analyze
  image: golang:1.22-alpine
  dependencies:
    - scan_full_repository
  before_script:
    - apk add --no-cache sqlite jq
  script:
    - echo "üìä Analyzing OSS compliance results..."
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Í≤∞Í≥º Ï∂îÏ∂ú
    - |
      if [ -f "db/oss_scan.db" ]; then
        echo "Exporting scan results..."
        sqlite3 db/oss_scan.db ".headers on" ".mode csv" "SELECT * FROM scan_results ORDER BY scan_start_time DESC LIMIT 10;" > artifacts/exports/recent_scans.csv
        sqlite3 db/oss_scan.db ".headers on" ".mode csv" "SELECT severity, COUNT(*) as count FROM vulnerabilities GROUP BY severity;" > artifacts/exports/vulnerability_summary.csv
        sqlite3 db/oss_scan.db ".headers on" ".mode csv" "SELECT license_name, COUNT(*) as count FROM components WHERE licenses_json != '' GROUP BY license_name;" > artifacts/exports/license_summary.csv
        
        # ÏöîÏïΩ ÌÜµÍ≥Ñ ÏÉùÏÑ±
        TOTAL_COMPONENTS=$(sqlite3 db/oss_scan.db "SELECT COUNT(*) FROM components;")
        TOTAL_VULNS=$(sqlite3 db/oss_scan.db "SELECT COUNT(*) FROM vulnerabilities;")
        CRITICAL_VULNS=$(sqlite3 db/oss_scan.db "SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'Critical';")
        HIGH_VULNS=$(sqlite3 db/oss_scan.db "SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'High';")
        
        echo "Total Components: $TOTAL_COMPONENTS"
        echo "Total Vulnerabilities: $TOTAL_VULNS"
        echo "Critical Vulnerabilities: $CRITICAL_VULNS"
        echo "High Vulnerabilities: $HIGH_VULNS"
        
        # Í≤∞Í≥ºÎ•º ÌôòÍ≤Ω Î≥ÄÏàòÎ°ú Ï†ÄÏû•
        echo "TOTAL_COMPONENTS=$TOTAL_COMPONENTS" >> analyze.env
        echo "TOTAL_VULNS=$TOTAL_VULNS" >> analyze.env
        echo "CRITICAL_VULNS=$CRITICAL_VULNS" >> analyze.env
        echo "HIGH_VULNS=$HIGH_VULNS" >> analyze.env
      fi
    
    # Critical Ï∑®ÏïΩÏ†êÏù¥ ÏûàÏúºÎ©¥ Ïã§Ìå®
    - |
      if [ -f "db/oss_scan.db" ]; then
        CRITICAL_COUNT=$(sqlite3 db/oss_scan.db "SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'Critical';")
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "‚ùå Critical vulnerabilities detected: $CRITICAL_COUNT"
          echo "Deployment will be blocked!"
          exit 1
        fi
      fi
    
  artifacts:
    paths:
      - artifacts/exports/
    reports:
      dotenv: analyze.env
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

# Î¶¨Ìè¨Ìä∏ Îã®Í≥Ñ
generate_reports:
  stage: report
  image: alpine:latest
  dependencies:
    - analyze_results
  before_script:
    - apk add --no-cache jq curl
  script:
    - echo "üìù Generating compliance reports..."
    
    # HTML Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
    - |
      cat > artifacts/reports/compliance_report.html << 'EOF'
      <!DOCTYPE html>
      <html>
      <head>
        <title>OSS Compliance Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .summary { background: #f0f8ff; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
          .critical { color: #d32f2f; font-weight: bold; }
          .high { color: #f57c00; font-weight: bold; }
          .medium { color: #fbc02d; font-weight: bold; }
          .low { color: #388e3c; font-weight: bold; }
          table { border-collapse: collapse; width: 100%; margin-top: 10px; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
        </style>
      </head>
      <body>
        <h1>üîç OSS Compliance Report</h1>
        <div class="summary">
          <h2>üìä Summary</h2>
                     <p>Total Components: <strong>${TOTAL_COMPONENTS:-0}</strong></p>
           <p>Total Vulnerabilities: <strong>${TOTAL_VULNS:-0}</strong></p>
           <p class="critical">Critical: ${CRITICAL_VULNS:-0}</p>
           <p class="high">High: ${HIGH_VULNS:-0}</p>
        </div>
        
        <h2>üìã Generated Files</h2>
        <ul>
          <li>SBOM (JSON, SPDX, CycloneDX)</li>
          <li>Vulnerability Reports</li>
          <li>License Summary</li>
          <li>Compliance Database</li>
        </ul>
        
        <p><em>Report generated on $(date)</em></p>
      </body>
      </html>
      EOF
    
    # Slack ÏïåÎ¶º (ÏÑ†ÌÉùÏ†Å)
    - |
      if [ -n "$SLACK_WEBHOOK_URL" ] && [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"üîç OSS Compliance Scan Complete\",
            \"attachments\": [
              {
                \"color\": \"good\",
                \"fields\": [
                  {\"title\": \"Repository\", \"value\": \"$CI_PROJECT_NAME\", \"short\": true},
                  {\"title\": \"Branch\", \"value\": \"$CI_COMMIT_REF_NAME\", \"short\": true},
                  {\"title\": \"Components\", \"value\": \"$TOTAL_COMPONENTS\", \"short\": true},
                  {\"title\": \"Vulnerabilities\", \"value\": \"$TOTAL_VULNS\", \"short\": true}
                ]
              }
            ]
          }" \
          $SLACK_WEBHOOK_URL
      fi
    
  artifacts:
    paths:
      - artifacts/reports/compliance_report.html
    expire_in: 1 month
  only:
    - main
    - develop
    - merge_requests

# ÎåÄÏãúÎ≥¥Îìú Î∞∞Ìè¨ (Î©îÏù∏ Î∏åÎûúÏπòÎßå)
deploy_dashboard:
  stage: deploy-dashboard
  image: golang:1.22-alpine
  dependencies:
    - build
    - analyze_results
  before_script:
    - apk add --no-cache git curl bash sqlite
  script:
    - echo "üåê Deploying OSS Compliance Dashboard..."
    
    # ÎåÄÏãúÎ≥¥Îìú ÏÑúÎ≤Ñ ÏãúÏûë (Î∞±Í∑∏ÎùºÏö¥Îìú)
    - nohup ./oss-compliance-scanner server --port 8080 > dashboard.log 2>&1 &
    - sleep 5
    
    # Ìó¨Ïä§Ï≤¥ÌÅ¨
    - curl -f http://localhost:8080/api/v1/health || exit 1
    
    - echo "‚úÖ Dashboard deployed successfully"
    - echo "Dashboard URL: http://localhost:8080"
    - echo "API URL: http://localhost:8080/api/v1"
    
  artifacts:
    paths:
      - dashboard.log
    expire_in: 1 day
  only:
    - main
  when: manual  # ÏàòÎèô Î∞∞Ìè¨

# Ïä§ÏºÄÏ§ÑÎßÅÎêú Ïä§Ï∫î (ÏïºÍ∞Ñ Ïä§Ï∫î)
nightly_scan:
  extends: scan_full_repository
  only:
    - schedules
  script:
    - echo "üåô Running nightly OSS compliance scan..."
    - ./oss-compliance-scanner scan --repo . --notify=true --verbose
    
    # ÏïºÍ∞Ñ Ïä§Ï∫î Í≤∞Í≥ºÎ•º ÌäπÎ≥ÑÌûà Ï≤òÎ¶¨
    - |
      if [ -f "db/oss_scan.db" ]; then
        CRITICAL_COUNT=$(sqlite3 db/oss_scan.db "SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'Critical';")
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "üö® CRITICAL: $CRITICAL_COUNT critical vulnerabilities found in nightly scan!"
          # Í∏¥Í∏â ÏïåÎ¶º Î°úÏßÅ
        fi
      fi 