package models

import (
	"encoding/json"
	"time"
)

// Vulnerability represents a security vulnerability
type Vulnerability struct {
	ID            int                `json:"id" gorm:"column:id"`
	ComponentID   int                `json:"component_id" gorm:"column:component_id"`
	VulnID        string             `json:"vuln_id" gorm:"column:vuln_id"`   // CVE-2023-1234
	Severity      string             `json:"severity" gorm:"column:severity"` // Critical, High, Medium, Low
	CVSS3Score    float64            `json:"cvss3_score" gorm:"column:cvss3_score"`
	CVSS2Score    float64            `json:"cvss2_score" gorm:"column:cvss2_score"`
	Description   string             `json:"description" gorm:"column:description"`
	PublishedDate *time.Time         `json:"published_date" gorm:"column:published_date"`
	ModifiedDate  *time.Time         `json:"modified_date" gorm:"column:modified_date"`
	URLs          []string           `json:"urls" gorm:"-"`
	URLsJSON      string             `json:"-" gorm:"column:urls_json"`
	Fixes         []VulnerabilityFix `json:"fixes" gorm:"-"`
	FixesJSON     string             `json:"-" gorm:"column:fixes_json"`
	Metadata      map[string]any     `json:"metadata" gorm:"-"`
	MetadataJSON  string             `json:"-" gorm:"column:metadata_json"`
	CreatedAt     time.Time          `json:"created_at" gorm:"column:created_at"`
	UpdatedAt     time.Time          `json:"updated_at" gorm:"column:updated_at"`
}

// VulnerabilityFix represents fix information for a vulnerability
type VulnerabilityFix struct {
	Version string `json:"version"`
	State   string `json:"state"` // fixed, wont-fix, unknown
}

// GrypeOutput represents the output structure from Grype tool
type GrypeOutput struct {
	Matches        []GrypeMatch    `json:"matches"`
	IgnoredMatches []GrypeMatch    `json:"ignoredMatches"`
	Source         GrypeSource     `json:"source"`
	Distro         GrypeDistro     `json:"distro"`
	Descriptor     GrypeDescriptor `json:"descriptor"`
}

type GrypeMatch struct {
	Vulnerability          GrypeVulnerability   `json:"vulnerability"`
	RelatedVulnerabilities []GrypeVulnerability `json:"relatedVulnerabilities"`
	MatchDetails           []GrypeMatchDetail   `json:"matchDetails"`
	Artifact               GrypeArtifact        `json:"artifact"`
}

type GrypeVulnerability struct {
	ID            string                `json:"id"`
	DataSource    string                `json:"dataSource"`
	Namespace     string                `json:"namespace"`
	Severity      string                `json:"severity"`
	URLs          []string              `json:"urls"`
	Description   string                `json:"description"`
	Cvss          []GrypeCvss           `json:"cvss"`
	Fix           GrypeVulnerabilityFix `json:"fix"`
	Advisories    []GrypeAdvisory       `json:"advisories"`
	PublishedDate string                `json:"publishedDate"`
	ModifiedDate  string                `json:"modifiedDate"`
}

type GrypeCvss struct {
	Version        string           `json:"version"`
	Vector         string           `json:"vector"`
	Metrics        GrypeCvssMetrics `json:"metrics"`
	VendorMetadata map[string]any   `json:"vendorMetadata"`
}

type GrypeCvssMetrics struct {
	BaseScore           float64 `json:"baseScore"`
	ExploitabilityScore float64 `json:"exploitabilityScore"`
	ImpactScore         float64 `json:"impactScore"`
}

type GrypeVulnerabilityFix struct {
	Versions []string `json:"versions"`
	State    string   `json:"state"`
}

type GrypeAdvisory struct {
	ID   string `json:"id"`
	Link string `json:"link"`
}

type GrypeMatchDetail struct {
	Type       string         `json:"type"`
	Matcher    string         `json:"matcher"`
	SearchedBy map[string]any `json:"searchedBy"`
	Found      map[string]any `json:"found"`
}

type GrypeArtifact struct {
	ID        string          `json:"id"`
	Name      string          `json:"name"`
	Version   string          `json:"version"`
	Type      string          `json:"type"`
	Locations []GrypeLocation `json:"locations"`
	Language  string          `json:"language"`
	Licenses  []string        `json:"licenses"`
	CPEs      []string        `json:"cpes"`
	PURL      string          `json:"purl"`
	Metadata  map[string]any  `json:"metadata"`
}

type GrypeLocation struct {
	Path      string `json:"path"`
	LayerID   string `json:"layerID,omitempty"`
	Namespace string `json:"namespace,omitempty"`
}

type GrypeSource struct {
	Type     string         `json:"type"`
	Target   string         `json:"target"`
	Metadata map[string]any `json:"metadata"`
}

type GrypeDistro struct {
	Name    string   `json:"name"`
	Version string   `json:"version"`
	IDLike  []string `json:"idLike"`
}

type GrypeDescriptor struct {
	Name          string         `json:"name"`
	Version       string         `json:"version"`
	Configuration map[string]any `json:"configuration"`
}

// SeverityLevel represents vulnerability severity levels
type SeverityLevel int

const (
	SeverityUnknown SeverityLevel = iota
	SeverityNegligible
	SeverityLow
	SeverityMedium
	SeverityHigh
	SeverityCritical
)

var severityLevelMap = map[string]SeverityLevel{
	"Unknown":    SeverityUnknown,
	"Negligible": SeverityNegligible,
	"Low":        SeverityLow,
	"Medium":     SeverityMedium,
	"High":       SeverityHigh,
	"Critical":   SeverityCritical,
}

var severityStringMap = map[SeverityLevel]string{
	SeverityUnknown:    "Unknown",
	SeverityNegligible: "Negligible",
	SeverityLow:        "Low",
	SeverityMedium:     "Medium",
	SeverityHigh:       "High",
	SeverityCritical:   "Critical",
}

// ParseSeverity converts string severity to SeverityLevel
func ParseSeverity(severity string) SeverityLevel {
	if level, exists := severityLevelMap[severity]; exists {
		return level
	}
	return SeverityUnknown
}

// String returns string representation of severity level
func (s SeverityLevel) String() string {
	if str, exists := severityStringMap[s]; exists {
		return str
	}
	return "Unknown"
}

// MarshalVulnerabilityFields marshals slice and map fields to JSON for database storage
func (v *Vulnerability) MarshalVulnerabilityFields() error {
	if len(v.URLs) > 0 {
		urlsJSON, err := json.Marshal(v.URLs)
		if err != nil {
			return err
		}
		v.URLsJSON = string(urlsJSON)
	}

	if len(v.Fixes) > 0 {
		fixesJSON, err := json.Marshal(v.Fixes)
		if err != nil {
			return err
		}
		v.FixesJSON = string(fixesJSON)
	}

	if len(v.Metadata) > 0 {
		metadataJSON, err := json.Marshal(v.Metadata)
		if err != nil {
			return err
		}
		v.MetadataJSON = string(metadataJSON)
	}

	return nil
}

// UnmarshalVulnerabilityFields unmarshals JSON fields back to slices and maps
func (v *Vulnerability) UnmarshalVulnerabilityFields() error {
	if v.URLsJSON != "" {
		if err := json.Unmarshal([]byte(v.URLsJSON), &v.URLs); err != nil {
			return err
		}
	}

	if v.FixesJSON != "" {
		if err := json.Unmarshal([]byte(v.FixesJSON), &v.Fixes); err != nil {
			return err
		}
	}

	if v.MetadataJSON != "" {
		if err := json.Unmarshal([]byte(v.MetadataJSON), &v.Metadata); err != nil {
			return err
		}
	}

	return nil
}
