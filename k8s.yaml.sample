# OSS Compliance Scanner를 위한 Kubernetes 배포 매니페스트
# 이 파일을 k8s.yaml로 복사하고 필요에 따라 수정하세요

apiVersion: v1
kind: Namespace
metadata:
  name: oss-compliance
  labels:
    name: oss-compliance

---

# 애플리케이션 설정을 위한 ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: oss-scanner-config
  namespace: oss-compliance
data:
  .oss-compliance-scanner.yaml: |
    database:
      driver: postgres
      host: postgres-service
      port: 5432
      username: oss_scanner
      name: oss_compliance
      ssl_mode: disable
    
    scanner:
      syft_path: /usr/local/bin/syft
      grype_path: /usr/local/bin/grype
      timeout_seconds: 300
      max_parallel_scans: 3
      temp_dir: /tmp/oss-scanner
      cache_dir: /app/cache
    
    policy:
      global_settings:
        enable_license_check: true
        enable_vulnerability_check: true
        scan_timeout_minutes: 30
        max_parallel_scans: 3
    
    notification:
      notify_on_violation: true
      notify_on_resolution: false
      min_severity_level: "High"
      notification_batching: true
      batching_interval_minutes: 60
    
    logging:
      level: info
      format: json
      output: stdout

---

# 민감한 설정을 위한 Secret
apiVersion: v1
kind: Secret
metadata:
  name: oss-scanner-secret
  namespace: oss-compliance
type: Opaque
data:
  # Base64 인코딩된 값들
  db-password: c2VjdXJlX3Bhc3N3b3Jk  # secure_password
  slack-webhook: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvWU9VUi9TTEFDS1Ypov== # your-slack-webhook

---

# PostgreSQL 배포
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: oss-compliance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: oss_compliance
        - name: POSTGRES_USER
          value: oss_scanner
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: oss-scanner-secret
              key: db-password
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - oss_scanner
            - -d
            - oss_compliance
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - oss_scanner
            - -d
            - oss_compliance
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init

---

# PostgreSQL 서비스
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: oss-compliance
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---

# PostgreSQL 영구 볼륨 클레임
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: oss-compliance
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---

# OSS Scanner API 배포
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oss-scanner-api
  namespace: oss-compliance
spec:
  replicas: 2
  selector:
    matchLabels:
      app: oss-scanner-api
  template:
    metadata:
      labels:
        app: oss-scanner-api
    spec:
      containers:
      - name: oss-scanner-api
        image: oss-compliance-scanner:latest
        ports:
        - containerPort: 8080
        env:
        - name: OSS_SCANNER_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: oss-scanner-secret
              key: db-password
        - name: OSS_SCANNER_NOTIFICATION_SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: oss-scanner-secret
              key: slack-webhook
        volumeMounts:
        - name: config
          mountPath: /app/.oss-compliance-scanner.yaml
          subPath: .oss-compliance-scanner.yaml
        - name: cache
          mountPath: /app/cache
        - name: temp
          mountPath: /tmp/oss-scanner
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: oss-scanner-config
      - name: cache
        emptyDir: {}
      - name: temp
        emptyDir: {}

---

# OSS Scanner API 서비스
apiVersion: v1
kind: Service
metadata:
  name: oss-scanner-api-service
  namespace: oss-compliance
spec:
  selector:
    app: oss-scanner-api
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP

---

# OSS Scanner 웹 대시보드 배포
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oss-scanner-web
  namespace: oss-compliance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oss-scanner-web
  template:
    metadata:
      labels:
        app: oss-scanner-web
    spec:
      containers:
      - name: oss-scanner-web
        image: oss-compliance-scanner:latest
        ports:
        - containerPort: 8080
        env:
        - name: OSS_SCANNER_MODE
          value: web
        - name: OSS_SCANNER_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: oss-scanner-secret
              key: db-password
        volumeMounts:
        - name: config
          mountPath: /app/.oss-compliance-scanner.yaml
          subPath: .oss-compliance-scanner.yaml
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: oss-scanner-config

---

# OSS Scanner 웹 서비스
apiVersion: v1
kind: Service
metadata:
  name: oss-scanner-web-service
  namespace: oss-compliance
spec:
  selector:
    app: oss-scanner-web
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP

---

# OSS Scanner 스케줄러 크론잡
apiVersion: batch/v1
kind: CronJob
metadata:
  name: oss-scanner-scheduler
  namespace: oss-compliance
spec:
  schedule: "0 2 * * *"  # 매일 오전 2시
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: oss-scanner-scheduler
            image: oss-compliance-scanner:latest
            command:
            - /bin/sh
            - -c
            - |
              # 스케줄된 스캔 로직을 여기에 추가하세요
              oss-compliance-scanner scan --repo /repos --notify
            env:
            - name: OSS_SCANNER_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: oss-scanner-secret
                  key: db-password
            - name: OSS_SCANNER_NOTIFICATION_SLACK_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: oss-scanner-secret
                  key: slack-webhook
            volumeMounts:
            - name: config
              mountPath: /app/.oss-compliance-scanner.yaml
              subPath: .oss-compliance-scanner.yaml
            - name: repos
              mountPath: /repos
              readOnly: true
            resources:
              requests:
                memory: "512Mi"
                cpu: "250m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          volumes:
          - name: config
            configMap:
              name: oss-scanner-config
          - name: repos
            # 소스 코드 저장소를 여기에 마운트하세요
            # git-sync 사이드카 또는 영구 볼륨이 될 수 있습니다
            emptyDir: {}
          restartPolicy: OnFailure

---

# 외부 접근을 위한 Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oss-scanner-ingress
  namespace: oss-compliance
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - oss-scanner.yourdomain.com
    secretName: oss-scanner-tls
  rules:
  - host: oss-scanner.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oss-scanner-web-service
            port:
              number: 8080
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: oss-scanner-api-service
            port:
              number: 8080

---

# API 배포를 위한 HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: oss-scanner-api-hpa
  namespace: oss-compliance
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: oss-scanner-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---

# 보안을 위한 NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oss-scanner-network-policy
  namespace: oss-compliance
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nginx-ingress
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - podSelector:
        matchLabels:
          app: oss-scanner-api
    - podSelector:
        matchLabels:
          app: oss-scanner-web
    ports:
    - protocol: TCP
      port: 5432
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432 